{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Expedia","tagline":"Expedia is a ruby wrapper for EAN (Expedia Affiliate Network)","body":"# Expedia\r\n\r\nExpedia is a ruby wrapper for [EAN - Expedia Affiliate Network](http://www.expediaaffiliate.com) APIs.\r\n\r\nOther details of this gem are:\r\n\r\n* It uses the the latest verion of the EAN API. i.e [Version 3](http://developer.ean.com/docs/read/hotels/version_3)\r\n* Only REST API support (No XML or SOAP support)\r\n* It uses Signature Pro method for Authentication. See [Live API Key Authentication and Access](http://developer.ean.com/docs/read/getting_started/authentication)\r\n\r\n## Installation\r\n\r\nFor Rails Add this line to your application's Gemfile:\r\n\r\n```\r\ngem 'expedia'\r\n```\r\n\r\nAnd then execute:\r\n\r\n```\r\n$ bundle\r\n```\r\n\r\nOr install it yourself as:\r\n\r\n```\r\n$ gem install expedia\r\n```\r\n\r\nEither you can configure Expedia in code on run-time\r\n\r\n```\r\nExpedia.cid = 55505\r\nExpedia.api_key = 'your_api_key'\r\nExpedia.shared_secret = 'your_shared_secret'\r\nExpedia.locale = 'en_US'\r\nExpedia.currency_code = 'USD'\r\nExpedia.minor_rev = 13\r\n```\r\n\r\nOr you can execute the following command to create an intializer:\r\n\r\n```\r\n$ rake expedia:initialize\r\n```\r\n\r\n## Usage\r\n\r\nAfter configuring keys for your EAN application, Default locale, currency and minor_rev use\r\n\r\n```\r\n# Instentiate api object\r\napi = Expedia::API.new\r\n\r\n# Method to search hotel. see http://developer.ean.com/docs/read/hotels/version_3/request_hotel_list\r\nresponse = api.get_list({:propertyName => 'Hotel Moa Berlin', :destinationString => 'berlin'})\r\n\r\nresponse.exception? # false if success\r\n```\r\n\r\nFollowing methods are expeosed by `Expedia::API object`\r\n\r\n**Note**: All method naming is done in correspondence with Expedia services and ruby conventions\r\nsee [Hotel API Documentation - Services section](http://developer.ean.com/docs/read/hotels#.UMf_hiNDt0w)\r\n\r\n```\r\nget_list({})\r\ngeo_search({})\r\nget_availability({})\r\nget_room_images({})\r\nget_information({})\r\nget_rules({})\r\nget_itinerary({})\r\nget_alternate_properties({})\r\nget_reservation({})\r\nget_payment_info({})\r\nget_cancel({})\r\nget_ping({})\r\nget_static_reservation({}) # To test Reservation (Static Reservation)\r\n```\r\n\r\nEvery method accepts Hash of parameter specific to every API. see [EAN Docs](http://developer.ean.com/docs/read/hotels/version_3) for more details.\r\n\r\n### Success\r\n\r\nif request is successfull you will get a `Expedia::HTTPService::Response` object in response.\r\nand you can use\r\n\r\n```\r\nresponse.status\r\nresponse.body\r\nresponse.headers\r\n```\r\n\r\n### Error\r\n\r\nIn case of any error a `Expedia::APIError` object is returned.\r\n\r\n**Note**: Expedia responds with status of 200 even if there is an exception (most of the times). So no Exception is raised!\r\n\r\n```\r\n# See http://developer.ean.com/docs/read/error_handling/Hotel_V3_Exception_Details\r\n\r\nresponse.status # Response status\r\nresponse.error_body # Complete error body\r\nresponse.category # Value indicating the nature of the exception or the reason it occurred\r\nresponse.presentation_message # Presentation error message returned\r\nresponse.verbose_message # More specific detailed error message\r\nresponse.handling # value indicating the severity of the exception and how it may be handled\r\n```\r\n\r\n### Test Booking (Static Reservation)\r\n\r\nFor Static reservation use `get_static_reservation()` method.\r\n\r\nCAUTION: Do Not send adress and booking information (creditCardNumber, creditCardIdentifier, creditCardExpirationMonth, creditCardExpirationYear, address1) in parameters to the method. Especially do not pass address1 parameter They are already been taken care of. For more on Static booking see [Static Test Booking Credit Card Information](http://developer.ean.com/docs/Test_Booking_Procedures)\r\n\r\nA static Booking example.\r\n\r\n```\r\nresponse = api.get_static_reservation({\t:arrivalDate => \"10/10/2013\", :departureDate => \"10/12/2013\",\r\n\t:hotelID => 359433, :supplierType => \"E\", :rateKey => \"084eab14-335e-46d6-aa2e-766fce6be32c\",\r\n\t:roomTypeCode => 200007964, :rateCode => 200865704, :chargeableRate => \"142.8\",\r\n  :room1 => \"1\", :room1FirstName => \"test\", :room1LastName => \"testers\", :room1BedTypeId => \"15\",\r\n  :room1SmokingPreference => \"NS\", :email => \"test@tesing.com\", :city => 'Bellevue',\r\n  :stateProvinceCode => 'WA', :countryCode => 'US', :postalCode => 98004 })\r\n```\r\n\r\n### Logging\r\n\r\n`Expedia::Utils.logger` points to STDOUT by default. You can use it to Log in Rails Applications\r\n\r\n```\r\nExpedia::Utils.logger = Rails.logger\r\n\r\n# And loggig methods available\r\n[:debug, :info, :warn, :error, :fatal]\r\n```"}